######## katago settings

katago=/opt/homebrew/bin/katago
kata.config=/opt/homebrew/Cellar/katago/1.11.0/share/katago/configs/analysis_example.cfg
#kata.model=/opt/homebrew/Cellar/katago/1.11.0/share/katago/g170e-b20c256x2-s5303129600-d1228401921.bin.gz
kata.model=/Users/adammiller/Downloads/kata1-b15c192-s1672170752-d466197061.txt.gz
# prints directly all text returned by katago
kata.debug_print=false
# prints query going in to katago from node analyzer
kata.print_analyzer_query=false
# prints one line summary of a query result
kata.print_summary_result=false

# human SL
kata.human_model=C:\\Users\\Adam\\Downloads\\weights\\b18c384nbt-humanv0.bin.gz

######## search settings

# visit count for katago when searching through a game
search.visits=1200
# when a potential problem is found, this many visits to double check its properties. Typically a lot higher than search.visits
search.root_visits=5000
# max problems to find in directory search
search.directory.max_finds=20

# how many stones must change life status for a move to be considered a mistake and an interesting potential problem
search.life_mistake_stones=7
# minimum absolute life status (from 0 to 1) for the stones changing status. too low and you get weird positions like ko's, tenukis, etc.
# ie, if a stone is at 0.4 or -0.4, it's not really that clear if it lives or dies, even though it's trending one way
# setting this too high will make it hard to find problems
search.min_alive_threshold=0.7
# stones in our life changing group that fall beneath the above threshold before we discard this problem
search.min_alive_threshold_stones=3

# if search requires a mistake, problems will only be considered where the original player made a big mistake in this position.
# The idea behind setting this true is to make sure problems are from real world positions where a human made a mistake,
# and thus might be a better learning opportunity. Obviously this generates way fewer problems.
# not yet implemented in true form
search.require_mistake=false
# max_policy is the maximum katago policy value for a solution in order for this to be an interesting problem. Values from 0 to 1. Lower values ensure less obvious problems.
search.max_policy=0.6
# no more than this many correct moves to solve a problem as detected from the source game
# note, the detector can miscount due to low visits during a search
search.max_solutions=1
# disallow problems where prev move was ko
search.no_last_ko_move=true
search.debug_pass_ownership=true

# how much the katago concept of ownership (from -1 to 1) has to change absolutely to consider this stone changing sides
search.ownership_threshold=1.3

# set turn to look only at a specific move in a specific game. The numbering is what katago would use.
# autoprob also looks for the pattern _mXX.sgf in the file name to pull this turn out, as a convention
#turn=207

# set forceproblem to true (only when looking at a specific move in one game) to force this to be detected as a problem
#forceproblem=true

######## shape

shape.min_turn=12

######## problem extraction

# for debugging ownership changes
extract.debug_print_ownership=false

######## problem path creation

# stop open exploring after this number of nodes have been added to the tree (it will still do key paths)
# this is one way to limit tree size
paths.bail_number=2000
# bail_depth means don't bail until this depth in the tree (ending on human move for correct paths, refutation move otherwise)
paths.bail_depth=4
# stop generating paths after this depth in the tree (ending on human move for correct paths, refutation move otherwise)
# paths.max_depth=5

# optional: specify only top level moves katago will explore. helpful for debugging quickly sometimes.
#paths.only_try_moves=A1,T17

# visits in root problem node
paths.visits_root=6000
# visits in every other node
paths.visits=1000

# this many stones must change life status for a move to be considered a mistake
paths.life_mistake_stones=4
# how much a stone must change life status to be counted (delta between -1 and 1 limits)
paths.life_mistake_threshold=0.8

# policy is between 0-1000 and means how likely the net thought this move would be
# min_policy here is a list of minimum policy values corresponding to a depth in the tree
# a move must meet this minimum in order to be considered interesting
# (the final policy value is assumed to continue as the tree deepens)
# generally the policies should increase so as you get deeper in the tree, the moves are required to be more interesting
# note that human vs problem response alternates. response only matters in correct vars (incorrect vars always responded to)
paths.min_policy=20,100,100,100,150,200,400
# normally we do responses if they get enough visits, even if the policy is low
# but setting this will cap it out -- otherwise variations go almost forever
paths.ignore_response_visits_depth=8

# pass moves are used to consider a counter-factual, should a response not be made
# when checking value of a pass, use this number of visits for establishing the base situation
paths.pass_visits_base=2000
# when checking value of a pass, use this number of visits for evaluating after a pass
paths.pass_visits_pass=2000

# debug ownership by printing it out
paths.debug_ownership=false
# print this number of candidate moves from katago results
paths.debug_print_moves=0

######## output

# write a file with the problem in sgf format?
output.write_file=true
# output path for problems
output.path=autoproblem.sgf
